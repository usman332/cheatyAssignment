
Question no 1:
Given a matrix of size R*C. Traverse the matrix in spiral form.
Example 1:
Input:
R = 4, C = 4
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12},
           {13, 14, 15,16}}
Output: 
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
Explanation:

Example 2:
Input:
R = 3, C = 4  
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12}}
Output: 
1 2 3 4 8 12 11 10 9 5 6 7
Explanation:
Applying same technique as shown above, 
output for the 2nd testcase will be 
1 2 3 4 8 12 11 10 9 5 6 7.
 Your Task: You dont need to read input or print anything. Complete the function spirallyTraverse() that takes matrix, R and C as input parameters and returns a list of integers denoting the spiral traversal of matrix.   Expected Time Complexity: O(R*C) Expected Auxiliary Space: O(R*C)  Constraints: 1 <= R, C <= 100 0 <= matrixi <= 100




Solution

	// Function print matrix in spiral form
	public list<int> spirallyTraverse(int r, int c, int a[][])
	{


      List<int>  spirateList = new ArrayList<int>();
		int i, k = 0, l = 0;

		/* k - starting row index
		r - ending row index
		l - starting column index
		c - ending column index
		i - iterator
		*/

		while (k < r && l < c) {
			// Print the first row from the remaining rows
			for (i = l; i < c; ++i) {
				System.out.print(a[k][i] + " ");
			}
			k++;

			// Print the last column from the remaining
			// columns
			for (i = k; i < r; ++i) {
		
				spirateList.add( a[i][c - 1]);

			}
			c--;

			// Print the last row from the remaining rows */
			if (k < r) {
				for (i = c - 1; i >= l; --i) {
			
					spirateList.add( a[r - 1][i]);
				}
				r--;
			}

			// Print the first column from the remaining
			// columns */
			if (l < c) {
				for (i = r - 1; i >= k; --i) {
					System.out.print(a[i][l] + " ");
	              spirateList.add( a[i][l]);

				}
				l++;
			}
		}
	}
